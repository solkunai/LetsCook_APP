name: Deploy Solana Program to Devnet

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config build-essential libssl-dev libudev-dev ca-certificates curl jq

    - name: Cache Cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Install latest Solana CLI
      run: |
        echo "Fetching latest Solana release..."
        # Try multiple methods to get the latest version
        LATEST_TAG=$(curl -s https://api.github.com/repos/solana-labs/solana/releases/latest | jq -r .tag_name) || LATEST_TAG="v1.18.11"
        echo "Installing Solana $LATEST_TAG..."
        
        # Download installer script first, then execute
        INSTALL_SUCCESS=false
        
        for i in {1..3}; do
          echo "Installation attempt $i..."
          
          # Try to download the installer script
          if curl -sSfL https://release.solana.com/${LATEST_TAG}/install -o solana-install.sh; then
            echo "✅ Download successful, executing installer..."
            if sh solana-install.sh; then
              echo "✅ Solana CLI installed successfully"
              INSTALL_SUCCESS=true
              break
            else
              echo "❌ Installer execution failed"
            fi
          else
            echo "❌ Download failed, trying fallback..."
          fi
          
          if [ $i -eq 3 ]; then
            echo "Using GitHub mirror as final fallback..."
            if curl -sSfL https://raw.githubusercontent.com/solana-labs/solana/${LATEST_TAG}/install -o solana-install.sh; then
              if sh solana-install.sh; then
                echo "✅ Solana CLI installed via GitHub mirror"
                INSTALL_SUCCESS=true
                break
              fi
            fi
          fi
          
          sleep 5
        done
        
        if [ "$INSTALL_SUCCESS" = false ]; then
          echo "❌ All installation methods failed"
          exit 1
        fi
        
        echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH
        export PATH="$HOME/.local/share/solana/install/active_release/bin:$PATH"
        echo "Solana version:"
        solana --version

    - name: Install Anchor CLI
      run: |
        echo "Installing Anchor CLI..."
        cargo install --git https://github.com/coral-xyz/anchor anchor-cli --locked --force
        anchor --version

    - name: Configure Solana CLI for Devnet
      run: |
        solana config set --url https://api.devnet.solana.com
        solana config set --commitment confirmed

    - name: Create wallet from secret
      run: |
        mkdir -p ~/.config/solana
        echo "${{ secrets.SOLANA_WALLET_KEY }}" | base64 -d > ~/.config/solana/id.json
        chmod 600 ~/.config/solana/id.json

    - name: Show wallet address
      run: |
        WALLET=$(solana address)
        echo "Wallet: $WALLET"
        echo "WALLET_ADDRESS=$WALLET" >> $GITHUB_ENV

    - name: Request airdrop (if balance < 1 SOL)
      run: |
        BALANCE=$(solana balance | awk '{print $1}')
        echo "Current balance: $BALANCE"
        if (( $(echo "$BALANCE < 1.0" | bc -l) )); then
          echo "Requesting airdrop..."
          solana airdrop 2
        fi

    - name: Build program
      run: |
        cd Backend
        anchor build

    - name: Deploy program
      run: |
        cd Backend
        anchor deploy

    - name: Extract Program ID
      run: |
        cd Backend
        PROGRAM_ID=$(solana address -k target/deploy/*.json)
        echo "Program ID: $PROGRAM_ID"
        echo "PROGRAM_ID=$PROGRAM_ID" >> $GITHUB_ENV
        echo "$PROGRAM_ID" > program_id.txt

    - name: Update Anchor.toml with Program ID
      run: |
        cd Backend
        cp Anchor.toml Anchor.toml.backup
        sed -i "s/\"[A-Za-z0-9]\{32,44\}\"/\"${{ env.PROGRAM_ID }}\"/" Anchor.toml
        echo "Updated Anchor.toml with new Program ID."

    - name: Upload Program ID
      uses: actions/upload-artifact@v4
      with:
        name: program-id
        path: Backend/program_id.txt

    - name: Upload updated Anchor.toml
      uses: actions/upload-artifact@v4
      with:
        name: anchor-config
        path: Backend/Anchor.toml

    - name: Commit updated Anchor.toml
      run: |
        cd Backend
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add Anchor.toml
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Update Program ID to ${{ env.PROGRAM_ID }} [skip ci]"
          git push
        fi

    - name: Display Summary
      run: |
        echo "=========================================="
        echo "🎉 DEPLOYMENT SUCCESSFUL 🎉"
        echo "=========================================="
        echo "Program ID: ${{ env.PROGRAM_ID }}"
        echo "Wallet Address: ${{ env.WALLET_ADDRESS }}"
        echo "Network: Devnet"
        echo "=========================================="
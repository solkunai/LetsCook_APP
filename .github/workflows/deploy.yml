name: Deploy Solana Program to Devnet

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
    # -------------------------------
    # âœ… Checkout code
    # -------------------------------
    - name: Checkout repository
      uses: actions/checkout@v4

    # -------------------------------
    # âœ… Extract Solana & Anchor versions
    # -------------------------------
    - name: Extract versions from Cargo.lock
      uses: solana-developers/github-actions/extract-versions@v0.2.7
      id: versions

    # -------------------------------
    # âœ… Install Rust toolchain
    # -------------------------------
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        components: rustfmt, clippy
        override: true

    # -------------------------------
    # âœ… Install Solana CLI (Official)
    # -------------------------------
    - name: Install Solana CLI
      run: |
        echo "=== Installing Solana CLI ==="
        sh -c "$(curl -sSfL https://release.solana.com/stable/install)"
        export PATH="$HOME/.local/share/solana/install/active_release/bin:$PATH"
        echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH
        solana --version

    # -------------------------------
    # âœ… Setup Anchor and Node.js
    # -------------------------------
    - name: Setup Anchor and Node.js
      uses: solana-developers/github-actions/setup-all@v0.2.7
      with:
        anchor_version: ${{ steps.versions.outputs.anchor_version }}
        node_version: 20

    # -------------------------------
    # âœ… Verify installations
    # -------------------------------
    - name: Verify installations
      run: |
        echo "=== Verifying installations ==="
        rustc --version
        cargo --version
        solana --version
        anchor --version
        node --version

    # -------------------------------
    # âœ… Clean Solana + Anchor caches
    # -------------------------------
    - name: Clean Solana & Anchor caches
      run: |
        echo "ðŸ§¹ Cleaning old Solana and Anchor artifacts..."
        rm -rf ~/.config/solana
        rm -rf ~/.local/share/solana
        rm -rf target/deploy
        rm -rf target/idl
        rm -rf target/types
        rm -rf .anchor
        echo "âœ… Cache cleanup complete"

    # -------------------------------
    # âœ… Configure Solana CLI
    # -------------------------------
    - name: Configure Solana CLI for Devnet
      run: |
        solana config set --url https://api.devnet.solana.com
        solana config set --commitment confirmed

    # -------------------------------
    # âœ… Create wallet from secret
    # -------------------------------
    - name: Create wallet from secret
      run: |
        mkdir -p ~/.config/solana
        echo "${{ secrets.SOLANA_WALLET_KEY }}" | base64 -d > ~/.config/solana/id.json
        chmod 600 ~/.config/solana/id.json
        solana address

    # -------------------------------
    # âœ… Request airdrop (if needed)
    # -------------------------------
    - name: Request airdrop (if balance < 1 SOL)
      run: |
        BALANCE=$(solana balance | awk '{print $1}')
        echo "ðŸ’° Current balance: $BALANCE"
        if (( $(echo "$BALANCE < 1.0" | bc -l) )); then
          echo "Requesting airdrop..."
          for i in {1..3}; do
            solana airdrop 2 && break
            echo "Airdrop attempt $i failed, retrying..."
            sleep 5
          done
          solana balance
        fi

    # -------------------------------
    # âœ… Build dependencies
    # -------------------------------
    - name: Build dependencies
      run: |
        cd Backend
        cargo build --release

    # -------------------------------
    # âœ… Build program
    # -------------------------------
    - name: Build program
      run: |
        cd Backend
        anchor build --verbose

    # -------------------------------
    # âœ… Deploy program
    # -------------------------------
    - name: Deploy program
      run: |
        cd Backend
        for i in {1..3}; do
          anchor deploy --verbose && break
          echo "Deploy attempt $i failed, retrying..."
          sleep 5
        done

    # -------------------------------
    # âœ… Extract Program ID
    # -------------------------------
    - name: Extract Program ID
      run: |
        cd Backend
        PROGRAM_ID=$(solana address -k target/deploy/counter.json)
        echo "Program ID: $PROGRAM_ID"
        echo "PROGRAM_ID=$PROGRAM_ID" >> $GITHUB_ENV
        echo "$PROGRAM_ID" > program_id.txt

    # -------------------------------
    # âœ… Update Anchor.toml
    # -------------------------------
    - name: Update Anchor.toml with Program ID
      run: |
        cd Backend
        cp Anchor.toml Anchor.toml.backup
        sed -i "/\[programs.devnet\]/,/^\[/ s/counter = \".*\"/counter = \"${{ env.PROGRAM_ID }}\"/" Anchor.toml
        echo "Updated Anchor.toml with new Program ID."
        cat Anchor.toml

    # -------------------------------
    # âœ… Upload artifacts
    # -------------------------------
    - name: Upload Program ID
      uses: actions/upload-artifact@v4
      with:
        name: program-id
        path: Backend/program_id.txt

    - name: Upload updated Anchor.toml
      uses: actions/upload-artifact@v4
      with:
        name: anchor-config
        path: Backend/Anchor.toml

    # -------------------------------
    # âœ… Commit updated Anchor.toml
    # -------------------------------
    - name: Commit updated Anchor.toml
      run: |
        cd Backend
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add Anchor.toml
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Update Program ID to ${{ env.PROGRAM_ID }} [skip ci]"
          git push
        fi

    # -------------------------------
    # âœ… Final Deployment Summary
    # -------------------------------
    - name: Display Summary
      run: |
        echo "=========================================="
        echo "ðŸŽ‰ DEPLOYMENT SUCCESSFUL ðŸŽ‰"
        echo "=========================================="
        echo "Program ID: ${{ env.PROGRAM_ID }}"
        echo "Wallet Address: $(solana address)"
        echo "Network: Devnet"
        solana --version
        anchor --version
        rustc --version
        echo "=========================================="

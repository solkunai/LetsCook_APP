name: Deploy Solana Program to Devnet

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Extract versions from Cargo.lock
      uses: solana-developers/github-actions/extract-versions@v0.2.7
      id: versions

    - name: Setup Solana, Anchor, and Node.js
      uses: solana-developers/github-actions/setup-all@v0.2.7
      with:
        solana_version: ${{ steps.versions.outputs.solana_version }}
        anchor_version: ${{ steps.versions.outputs.anchor_version }}
        node_version: 20

    - name: Verify and fix installations
      run: |
        echo "=== Verifying installations ==="
        echo "Current PATH: $PATH"
        
        # Check if solana is available
        if ! command -v solana &> /dev/null; then
          echo "❌ Solana CLI not found, installing manually..."
          SOLANA_VERSION=${{ steps.versions.outputs.solana_version }}
          if [ -z "$SOLANA_VERSION" ]; then
            SOLANA_VERSION="1.18.20"
            echo "No solana_version found in Cargo.lock, using fallback: $SOLANA_VERSION"
          fi
          # Try solana-install init first
          solana-install init $SOLANA_VERSION --no-modify-path || {
            echo "solana-install init failed, trying curl method..."
            sh -c "$(curl -sSfL https://release.solana.com/$SOLANA_VERSION/install)" || {
              echo "Failed to install Solana CLI"; exit 1;
            }
          }
          # Ensure binary exists
          if [ ! -f "$HOME/.local/share/solana/install/active_release/bin/solana" ]; then
            echo "❌ Solana binary not found at $HOME/.local/share/solana/install/active_release/bin/solana"
            ls -la $HOME/.local/share/solana/install/active_release/bin || true
            exit 1
          fi
          # Make binary executable
          chmod +x $HOME/.local/share/solana/install/active_release/bin/solana
          export PATH="$HOME/.local/share/solana/install/active_release/bin:$PATH"
          echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH
          echo "Updated PATH: $PATH"
          if ! command -v solana &> /dev/null; then
            echo "❌ Solana CLI still not found after installation"
            ls -la $HOME/.local/share/solana/install/active_release/bin || true
            exit 1
          fi
          echo "✅ Solana CLI installed manually"
        else
          echo "✅ Solana CLI found"
        fi
        
        # Check if anchor is available
        if ! command -v anchor &> /dev/null; then
          echo "❌ Anchor CLI not found, installing manually..."
          ANCHOR_VERSION=${{ steps.versions.outputs.anchor_version }}
          if [ -z "$ANCHOR_VERSION" ]; then
            ANCHOR_VERSION="0.31.1"
            echo "No anchor_version found in Cargo.lock, using fallback: $ANCHOR_VERSION"
          fi
          cargo install --git https://github.com/coral-xyz/anchor anchor-cli --version $ANCHOR_VERSION --force || { echo "Failed to install Anchor CLI"; exit 1; }
          echo "✅ Anchor CLI installed manually"
        else
          echo "✅ Anchor CLI found"
        fi
        
        # Final verification
        echo "Final verification:"
        solana --version || { echo "Solana CLI verification failed"; exit 1; }
        anchor --version || { echo "Anchor CLI verification failed"; exit 1; }

    - name: Configure Solana CLI for Devnet
      run: |
        solana config set --url https://api.devnet.solana.com
        solana config set --commitment confirmed

    - name: Create wallet from secret
      run: |
        mkdir -p ~/.config/solana
        echo "${{ secrets.SOLANA_WALLET_KEY }}" | base64 -d > ~/.config/solana/id.json
        chmod 600 ~/.config/solana/id.json

    - name: Show wallet address
      run: |
        WALLET=$(solana address)
        echo "Wallet: $WALLET"
        echo "WALLET_ADDRESS=$WALLET" >> $GITHUB_ENV

    - name: Request airdrop (if balance < 1 SOL)
      run: |
        BALANCE=$(solana balance | awk '{print $1}')
        echo "Current balance: $BALANCE"
        if (( $(echo "$BALANCE < 1.0" | bc -l) )); then
          echo "Requesting airdrop..."
          for i in {1..3}; do
            solana airdrop 2 && break
            echo "Airdrop attempt $i failed, retrying..."
            sleep 5
          done
          solana balance
        fi

    - name: Install dependencies
      run: |
        cd Backend
        cargo build --release

    - name: Build program
      run: |
        cd Backend
        anchor build --verbose

    - name: Deploy program
      run: |
        cd Backend
        for i in {1..3}; do
          anchor deploy --verbose && break
          echo "Deploy attempt $i failed, retrying..."
          sleep 5
        done

    - name: Extract Program ID
      run: |
        cd Backend
        PROGRAM_ID=$(solana address -k target/deploy/counter.json)
        echo "Program ID: $PROGRAM_ID"
        echo "PROGRAM_ID=$PROGRAM_ID" >> $GITHUB_ENV
        echo "$PROGRAM_ID" > program_id.txt

    - name: Update Anchor.toml with Program ID
      run: |
        cd Backend
        cp Anchor.toml Anchor.toml.backup
        sed -i "/\[programs.devnet\]/,/^\[/ s/counter = \".*\"/counter = \"${{ env.PROGRAM_ID }}\"/" Anchor.toml
        echo "Updated Anchor.toml with new Program ID."
        cat Anchor.toml

    - name: Upload Program ID
      uses: actions/upload-artifact@v4
      with:
        name: program-id
        path: Backend/program_id.txt

    - name: Upload updated Anchor.toml
      uses: actions/upload-artifact@v4
      with:
        name: anchor-config
        path: Backend/Anchor.toml

    - name: Commit updated Anchor.toml
      run: |
        cd Backend
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add Anchor.toml
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Update Program ID to ${{ env.PROGRAM_ID }} [skip ci]"
          git push
        fi

    - name: Display Summary
      run: |
        echo "=========================================="
        echo "🎉 DEPLOYMENT SUCCESSFUL 🎉"
        echo "=========================================="
        echo "Program ID: ${{ env.PROGRAM_ID }}"
        echo "Wallet Address: ${{ env.WALLET_ADDRESS }}"
        echo "Network: Devnet"
        echo "Solana Version: ${{ steps.versions.outputs.solana_version }}"
        echo "Anchor Version: ${{ steps.versions.outputs.anchor_version }}"
        echo "=========================================="
